// Copyright Jamie Iles, 2017
//
// This file is part of s80x86.
//
// s80x86 is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// s80x86 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with s80x86.  If not, see <http://www.gnu.org/licenses/>.

.at 0xaa;
    jmp stosb;

.auto_address;
stosb:
    ra_sel DI, jmp_if_not_rep stosb_no_rep;
    rb_cl;
stosb_rep_loop:
    ra_sel CX, a_sel RA, b_sel IMMEDIATE, immediate 0x0, alu_op SUB,
        jmp_rb_zero stosb_done;
    ra_sel DI, a_sel RA, b_sel IMMEDIATE, immediate 0x1, alu_op SUB,
        rd_sel_source MICROCODE_RD_SEL, rd_sel CX;
stosb_no_rep:
    ra_sel DI, a_sel RA, alu_op SELA, mar_wr_sel Q, mar_write;
    a_sel RA, b_sel IMMEDIATE, immediate 0x1, alu_op NEXT,
        rd_sel_source MICROCODE_RD_SEL, rd_sel DI;
    width W8, ra_sel AL;
    width W8, alu_op SELA, mdr_write, segment ES, segment_force;
    width W8, segment ES, segment_force, mem_write, jmp_if_not_rep stosb_done;
    rb_cl, ext_int_yield, jmp stosb_rep_loop;
stosb_done:
    next_instruction;

.at 0xab;
    jmp stosw;

.auto_address;
stosw:
    ra_sel DI, jmp_if_not_rep stosw_no_rep;
    rb_cl;
stosw_rep_loop:
    ra_sel CX, a_sel RA, b_sel IMMEDIATE, immediate 0x0, alu_op SUB,
        jmp_rb_zero stosw_done;
    ra_sel DI, a_sel RA, b_sel IMMEDIATE, immediate 0x1, alu_op SUB,
        rd_sel_source MICROCODE_RD_SEL, rd_sel CX;
stosw_no_rep:
    ra_sel DI, a_sel RA, alu_op SELA, mar_wr_sel Q, mar_write;
    a_sel RA, b_sel IMMEDIATE, immediate 0x2, alu_op NEXT,
        rd_sel_source MICROCODE_RD_SEL, rd_sel DI;
    ra_sel AL;
    alu_op SELA, mdr_write, segment ES, segment_force;
    segment ES, segment_force, mem_write, jmp_if_not_rep stosw_done;
    rb_cl, ext_int_yield, jmp stosw_rep_loop;
stosw_done:
    next_instruction;
