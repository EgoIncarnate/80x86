// vi: ft=systemverilog
`ifndef MICROCODE_ROM_PATH
`define MICROCODE_ROM_PATH "."
`endif

module Microcode(input logic clk,
                 input logic reset,
                 input logic nmi_pulse,
                 // verilator lint_off UNUSED
                 // verilator lint_off UNDRIVEN
                 input logic intr,
                 input logic [7:0] irq,
                 output logic inta,
                 output logic irq_to_mdr,
                 output logic start_interrupt,
                 input logic stall,
                 input logic divide_error,
                 input logic rm_is_reg,
                 input logic [2:0] modrm_reg,
                 input logic int_enabled,
                 input logic zf,
                 input logic tf,
                 output logic [15:0] microcode_immediate,
                 output logic [8:0] update_flags,
                 output logic use_microcode_immediate,
                 output logic segment_override,
                 output logic [7:0] opcode,
                 input logic jump_taken,
                 input logic rb_zero,
                 output logic lock,
                 output logic multibit_shift,
                 // Microinstruction fields.
                 <%#exported_fields%>
                 output logic <%type%><%name%>,
                 <%/exported_fields%>
                 // Fifo Read Port.
                 output logic fifo_rd_en,
                 input logic [7:0] fifo_rd_data,
                 input logic fifo_empty,
                 // Debug
                 output logic debug_stopped,
                 input logic debug_seize,
                 input logic [7:0] debug_addr,
                 input logic debug_run);

localparam num_instructions = <%num_instructions%>;
localparam addr_bits = <%addr_bits%>;
localparam reset_address = <%addr_bits%>'h129;
localparam nmi_address = <%addr_bits%>'h12a;
localparam irq_address = <%addr_bits%>'h12b;
localparam single_step_address = <%addr_bits%>'h12c;
localparam divide_error_address = <%addr_bits%>'h101;
localparam next_instruction_address = <%addr_bits%>'h100;
localparam debug_wait_address = <%addr_bits%>'h102;

typedef struct packed {
<%#fields%>
    logic <%type%><%name%>;
<%/fields%>
} microcode_instruction;

microcode_instruction mem[num_instructions] /* synthesis ram_init_file = "microcode.mif" */;
microcode_instruction current;
reg [addr_bits-1:0] addr;
wire [addr_bits-1:0] next_addr;

assign segment_override = current.prefix_type == PrefixType_SEGMENT_OVERRIDE;
assign use_microcode_immediate = |current.immediate;

always_comb begin
    case (current.immediate)
<%#immediates%>
    <%idx%>: microcode_immediate = 16'h<%val%>;
<%/immediates%>
    default: microcode_immediate = 16'h0;
    endcase
end

always_comb begin
    case (current.update_flags)
<%#flags%>
    <%idx%>: update_flags = 9'h<%val%>;
<%/flags%>
    default: update_flags = 9'h0;
    endcase
end

<%#exported_fields%>
assign <%name%> = current.<%name%>;
<%/exported_fields%>

wire will_ext_int_yield = current.ext_int_yield & (take_nmi | take_irq);

assign fifo_rd_en = ~reset & current.fifo_pop & ~opcode_popped &
    ~fifo_empty & ~will_ext_int_yield;
wire do_stall = stall | fifo_rd_en |
    (current.fifo_pop & !opcode_popped & !will_ext_int_yield);

reg opcode_popped;
reg [1:0] rep_prefix_type;
wire has_rep_prefix = (rep_prefix_type == PrefixType_REPE ||
                       rep_prefix_type == PrefixType_REPNE);
reg rep_complete;

assign debug_stopped = addr == {{addr_bits-9{1'b0}}, 9'h102};
assign multibit_shift = opcode == 8'hd2 || opcode == 8'hd3;

reg nmi_pending;
reg ext_int_inhibit;
wire take_nmi = (nmi_pending | nmi_pulse) & !ext_int_inhibit;
wire take_irq = intr & int_enabled & !ext_int_inhibit;
wire do_single_step = current.next_instruction & !ext_int_inhibit &
    trap_flag_set & current.next != debug_wait_address;
assign start_interrupt = next_addr == nmi_address ||
                         next_addr == irq_address;
assign inta = next_addr == irq_address;
assign irq_to_mdr = inta;
reg trap_flag_set;

always_ff @(posedge clk or posedge reset)
    if (reset)
        trap_flag_set <= 1'b0;
    else if (next_addr == single_step_address)
        trap_flag_set <= 1'b0;
    else if (opcode_popped)
        trap_flag_set <= tf;

always_ff @(posedge clk or posedge reset)
    if (reset)
        ext_int_inhibit <= 1'b0;
    else if (current.ext_int_inhibit && current.next != debug_wait_address)
        ext_int_inhibit <= 1'b1;
    else if (current.fifo_pop && !do_stall)
        ext_int_inhibit <= 1'b0;

`ifdef verilator
initial $readmemb({{`MICROCODE_ROM_PATH, "/microcode.bin"}}, mem);
`endif

always_comb begin
    case (rep_prefix_type)
    PrefixType_REPE: rep_complete = ~zf;
    PrefixType_REPNE: rep_complete = zf;
    default: rep_complete = 1'b0;
    endcase
end

always_ff @(posedge clk or posedge reset)
    if (reset)
        nmi_pending <= 1'b0;
    else if (next_addr == nmi_address)
        nmi_pending <= 1'b0;
    else if (nmi_pulse)
        nmi_pending <= 1'b1;

always_ff @(posedge clk or posedge reset)
    if (reset)
        opcode_popped <= 1'b0;
    else if (!do_stall)
        opcode_popped <= 1'b0;
    else if (fifo_rd_en)
        opcode_popped <= 1'b1;

always_ff @(posedge clk)
    if (opcode_popped)
        opcode <= fifo_rd_data;

always_ff @(posedge clk or posedge reset)
    if (reset)
        rep_prefix_type <= 2'b0;
    else if (next_instruction)
        rep_prefix_type <= 2'b0;
    else if (current.prefix_type == PrefixType_REPNE ||
             current.prefix_type == PrefixType_REPE)
        rep_prefix_type <= current.prefix_type;

always_comb begin
    if (reset)
        next_addr = reset_address;
    else if (debug_stopped && debug_run)
        next_addr = {{addr_bits - 9{1'b0}}, 1'b1, debug_addr};
    else if (!do_stall && current.ext_int_yield && take_nmi)
        next_addr = nmi_address;
    else if (!do_stall && current.ext_int_yield && take_irq)
        next_addr = irq_address;
    else if (!do_stall && current.jump_type == JumpType_JUMP_TAKEN)
        next_addr = jump_taken ? current.next : addr + 1'b1;
    else if (!do_stall && current.jump_type == JumpType_ZERO)
        next_addr = zf ? current.next : addr + 1'b1;
    else if (!do_stall && current.jump_type == JumpType_HAS_NO_REP_PREFIX)
        next_addr = ~has_rep_prefix ? current.next : addr + 1'b1;
    else if (!do_stall && current.jump_type == JumpType_REP_NOT_COMPLETE)
        next_addr = !rep_complete ? current.next : addr + 1'b1;
    else if (!do_stall && current.jump_type == JumpType_DISPATCH_REG)
        next_addr = current.next + {{addr_bits-3{1'b0}}, modrm_reg};
    else if (!do_stall && current.jump_type == JumpType_RM_REG_MEM)
        next_addr = current.next + {{addr_bits-1{1'b0}}, ~rm_is_reg};
    else if (!do_stall && current.jump_type == JumpType_OPCODE)
        next_addr = {{addr_bits-8{1'b0}}, fifo_rd_data};
    else if (!do_stall && current.jump_type == JumpType_RB_ZERO)
        next_addr = rb_zero ? current.next : addr + 1'b1;
    else if (!do_stall && divide_error)
        next_addr = divide_error_address;
    else if (!do_stall && current.next_instruction && take_nmi)
        next_addr = nmi_address;
    else if (!do_stall && current.next_instruction && take_irq)
        next_addr = irq_address;
    else if (!do_stall && current.next_instruction && do_single_step)
        next_addr = single_step_address;
    else if (!do_stall && current.next_instruction && debug_seize)
        next_addr = debug_wait_address;
    else if (!do_stall && current.next_instruction)
        next_addr = next_instruction_address;
    else if (!do_stall)
        next_addr = current.next;
    else
        next_addr = addr;
end

always @(posedge clk)
    addr <= next_addr;

always @(posedge clk)
    current <= mem[next_addr];

always_ff @(posedge clk or posedge reset)
    if (reset)
        lock <= 1'b0;
    else if (!do_stall && current.next_instruction)
        lock <= 1'b0;
    else if (current.lock)
        lock <= 1'b1;

`ifdef verilator
export "DPI-C" function get_microcode_address;

function [addr_bits-1:0] get_microcode_address;
    get_microcode_address = addr;
endfunction

export "DPI-C" function get_ext_int_yield;

function logic get_ext_int_yield;
    get_ext_int_yield = current.ext_int_yield;
endfunction

int microcode_coverage[num_instructions];

always_ff @(posedge clk)
    microcode_coverage[addr] <= microcode_coverage[addr] + 1;

export "DPI-C" function get_microcode_num_instructions;

function int get_microcode_num_instructions;
    get_microcode_num_instructions = num_instructions;
endfunction

export "DPI-C" function get_microcode_coverage_bin;

function int get_microcode_coverage_bin;
    input int bin;
    get_microcode_coverage_bin = microcode_coverage[bin];
endfunction
`endif

endmodule
