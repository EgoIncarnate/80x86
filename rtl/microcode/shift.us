#define SHIFT1_8(alu_func, flags)                                               \
.auto_address;                                                                  \
alu_func ## d0_reg:                                                             \
    a_sel RA, b_sel IMMEDIATE, immediate 0x1, alu_op alu_func, 			\
        rd_sel_source MODRM_RM_REG, update_flags flags,                         \
        reg_wr_en, width 8, next_instruction;                                   \
alu_func ## d0_mem:                                                             \
    segment DS, mem_read, width 8;                                              \
    width 8, a_sel MDR, b_sel IMMEDIATE, immediate 0x1, alu_op alu_func,        \
        mdr_write, update_flags flags, segment DS, jmp write_8_complete;

#define SHIFT1_16(alu_func, flags)                                              \
alu_func ## d1_reg:                                                             \
    a_sel RA, b_sel IMMEDIATE, immediate 0x1, alu_op alu_func,       		\
        rd_sel_source MODRM_RM_REG, update_flags flags,                         \
        reg_wr_en, next_instruction;                                            \
alu_func ## d1_mem:                                                             \
    segment DS, mem_read;                                                       \
    a_sel MDR, b_sel IMMEDIATE, immediate 0x1, alu_op alu_func,      		\
        mdr_write, update_flags flags, segment DS, jmp write_16_complete;

// Variable shifts first write the number of shifts into the temporary
// register, then when processing, the ALU will perform a subtraction of the
// count (which is an input to the ALU), and output the decremented value
// along with a single bit-shifted value, stalling until complete.  The
// temporary register needs to be written each cycle, as does the result.

#define SHIFTN_8(alu_func, flags)                                               \
alu_func ## d2:									\
    ra_modrm_rm_reg, b_sel RB, alu_op SELB, tmp_wr_en, width 8,                 \
        segment DS, jmp_rm_reg_mem alu_func ## d2_reg;	                        \
alu_func ## d2_reg:                                                             \
    a_sel RA, b_sel RB, alu_op alu_func, rd_sel_source MODRM_RM_REG, 		\
        update_flags flags, reg_wr_en, width 8, tmp_wr_sel Q_HIGH, 		\
        tmp_wr_en, next_instruction, ra_modrm_rm_reg;                           \
alu_func ## d2_mem:                                                             \
    segment DS, mem_read, width 8, rb_cl;                                       \
    width 8, a_sel MDR, b_sel RB, alu_op alu_func, mdr_write,        		\
        update_flags flags, segment DS, tmp_wr_sel Q_HIGH, tmp_wr_en,           \
        jmp write_8_complete;

#define SHIFTN_16(alu_func, flags)                                              \
alu_func ## d3:									\
    ra_modrm_rm_reg, b_sel RB, alu_op SELB, tmp_wr_en,                          \
        segment DS, jmp_rm_reg_mem alu_func ## d3_reg;	                        \
alu_func ## d3_reg:                                                             \
    a_sel RA, b_sel RB, alu_op alu_func, rd_sel_source MODRM_RM_REG, 		\
        update_flags flags, reg_wr_en, tmp_wr_sel Q_HIGH, tmp_wr_en,            \
        next_instruction, ra_modrm_rm_reg;                                      \
alu_func ## d3_mem:                                                             \
    segment DS, mem_read, rb_cl;                                                \
    a_sel MDR, b_sel RB, alu_op alu_func, mdr_write,                 		\
        update_flags flags, segment DS, tmp_wr_sel Q_HIGH, tmp_wr_en,           \
        jmp write_16_complete;
