#pragma once

#define ARITH_REGMEM_REG_8(opcode, alufunc, flags)                              \
.at opcode;                                                                     \
    modrm_start, mar_write, mar_wr_sel EA, rb_modrm_reg, width 8,               \
        ra_modrm_rm_reg, jmp_rm_reg_mem alufunc ## opcode ##_reg;               \
.auto_address;                                                                  \
alufunc ## opcode ## _reg:                                                      \
    a_sel RA, b_sel RB, q_sel ALU, alu_op alufunc,                              \
        rd_sel_source MODRM_RM_REG, update_flags flags, reg_wr_en,              \
        width 8, jmp opcode_fetch, clear_prefixes;                              \
alufunc ## opcode ## _mem:                                                      \
    segment DS, mem_read, width 8, rb_modrm_reg;                                \
    a_sel MDR, b_sel RB, q_sel ALU, alu_op alufunc, mdr_write,                  \
        update_flags flags, width 8;                                            \
    width 8, segment DS, mem_write, jmp opcode_fetch, clear_prefixes;

#define ARITH_REGMEM_REG_16(opcode, alufunc, flags)                             \
.at opcode;                                                                     \
    modrm_start, mar_write, mar_wr_sel EA, rb_modrm_reg,                        \
        ra_modrm_rm_reg, jmp_rm_reg_mem alufunc ## opcode ## _reg;              \
.auto_address;                                                                  \
alufunc ## opcode ## _reg:                                                      \
    a_sel RA, b_sel RB, q_sel ALU, alu_op alufunc,                              \
        rd_sel_source MODRM_RM_REG, update_flags flags, reg_wr_en,              \
        jmp opcode_fetch, clear_prefixes;                                       \
alufunc ## opcode ## _mem:                                                      \
    segment DS, mem_read, rb_modrm_reg;                                         \
    a_sel MDR, b_sel RB, q_sel ALU, alu_op alufunc, mdr_write,                  \
        update_flags flags;                                                     \
    segment DS, mem_write, jmp opcode_fetch, clear_prefixes;

#define ARITH_REG_REGMEM_8(opcode, alufunc, flags)                              \
.at opcode;                                                                     \
    modrm_start, mar_write, mar_wr_sel EA, rb_modrm_reg, width 8,               \
        ra_modrm_rm_reg, jmp_rm_reg_mem alufunc ## opcode ## _reg;              \
.auto_address;                                                                  \
alufunc ## opcode ## _reg:                                                      \
    a_sel RA, b_sel RB, q_sel ALU, alu_op alufunc, rd_sel_source MODRM_REG,     \
        update_flags flags, reg_wr_en, width 8,                                 \
        jmp opcode_fetch, clear_prefixes;                                       \
alufunc ## opcode ## _mem:                                                      \
    segment DS, mem_read, width 8, rb_modrm_reg;                                \
    a_sel MDR, b_sel RB, q_sel ALU, alu_op alufunc, rd_sel_source MODRM_REG,    \
        update_flags flags, reg_wr_en, width 8,                                 \
        jmp opcode_fetch, clear_prefixes;

#define ARITH_REG_REGMEM_16(opcode, alufunc, flags)                             \
.at opcode;                                                                     \
    modrm_start, mar_write, mar_wr_sel EA, rb_modrm_reg,                        \
        ra_modrm_rm_reg, jmp_rm_reg_mem alufunc ## opcode ## _reg;              \
.auto_address;                                                                  \
alufunc ## opcode ## _reg:                                                      \
    a_sel RA, b_sel RB, q_sel ALU, alu_op alufunc, rd_sel_source MODRM_REG,     \
        update_flags flags, reg_wr_en, jmp opcode_fetch, clear_prefixes;        \
alufunc ## opcode ## _mem:                                                      \
    segment DS, mem_read, rb_modrm_reg;                                         \
    a_sel MDR, b_sel RB, q_sel ALU, alu_op alufunc, rd_sel_source MODRM_REG,    \
        update_flags flags, reg_wr_en, jmp opcode_fetch, clear_prefixes;        \

#define ARITH_REGMEM_AL_8(opcode, alufunc, flags)                               \
.at opcode;                                                                     \
    read_immed, width 8, ra_sel AL, jmp alufunc ## opcode;                      \
.auto_address;                                                                  \
alufunc ## opcode:                                                              \
    a_sel RA, b_sel IMMEDIATE, q_sel ALU, alu_op alufunc,                       \
        rd_sel_source MICROCODE_RD_SEL, rd_sel AL,                              \
        update_flags flags, reg_wr_en, width 8,                                 \
        jmp opcode_fetch, clear_prefixes;

#define ARITH_REGMEM_AX_16(opcode, alufunc, flags)                              \
.at opcode;                                                                     \
    read_immed, ra_sel AX, jmp alufunc ## opcode;                               \
.auto_address;                                                                  \
alufunc ## opcode:                                                              \
    a_sel RA, b_sel IMMEDIATE, q_sel ALU, alu_op alufunc,                       \
        rd_sel_source MICROCODE_RD_SEL, rd_sel AX,                              \
        update_flags flags, reg_wr_en, jmp opcode_fetch, clear_prefixes;        \

#define ARITH_80(alufunc, flags)                                                \
alufunc ## 80_reg:                                                              \
    a_sel RA, b_sel IMMEDIATE, q_sel ALU, alu_op alufunc,                       \
        rd_sel_source MODRM_RM_REG, reg_wr_en,                                  \
        update_flags flags, jmp opcode_fetch, clear_prefixes;                   \
alufunc ## 80_mem:                                                              \
    segment DS, mem_read, width 8, rb_modrm_reg;                                \
    a_sel MDR, b_sel IMMEDIATE, q_sel ALU, alu_op alufunc,                      \
        mdr_write, update_flags flags;                                          \
    mem_write, jmp opcode_fetch, clear_prefixes;

#define ARITH_81(alufunc, flags)                                                \
alufunc ## 81_reg:                                                              \
    a_sel RA, b_sel IMMEDIATE, q_sel ALU, alu_op alufunc,                       \
        rd_sel_source MODRM_RM_REG, reg_wr_en,                                  \
        update_flags flags, jmp opcode_fetch, clear_prefixes;                   \
alufunc ## 81_mem:                                                              \
    segment DS, mem_read, rb_modrm_reg;                                         \
    a_sel MDR, b_sel IMMEDIATE, q_sel ALU, alu_op alufunc,                      \
        mdr_write, update_flags flags;                                          \
    mem_write, jmp opcode_fetch, clear_prefixes;

#define ARITH_82(alufunc, flags)                                                \
alufunc ## 82_reg:                                                              \
    a_sel RA, b_sel IMMEDIATE, q_sel ALU, alu_op alufunc,                       \
        rd_sel_source MODRM_RM_REG, reg_wr_en,                                  \
        update_flags flags, jmp opcode_fetch, clear_prefixes;                   \
alufunc ## 82_mem:                                                              \
    segment DS, mem_read, rb_modrm_reg;                                         \
    a_sel MDR, b_sel IMMEDIATE, q_sel ALU, alu_op alufunc,                      \
        mdr_write, update_flags flags;                                          \
    mem_write, jmp opcode_fetch, clear_prefixes;

#define ARITH_83(alufunc, flags)                                                \
alufunc ## 83_reg:                                                              \
    a_sel RA, b_sel IMMEDIATE, q_sel ALU, alu_op alufunc,                       \
        rd_sel_source MODRM_RM_REG, reg_wr_en,                                  \
        update_flags flags, jmp opcode_fetch, clear_prefixes;                   \
alufunc ## 83_mem:                                                              \
    segment DS, mem_read, rb_modrm_reg;                                         \
    a_sel MDR, b_sel IMMEDIATE, q_sel ALU, alu_op alufunc,                      \
        mdr_write, update_flags flags;                                          \
    mem_write, jmp opcode_fetch, clear_prefixes;
