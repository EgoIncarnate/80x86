// MOV 0x88     r/m := r (8-bit)
.at 0x88;
    modrm_start, mar_write, mar_wr_sel EA, rb_modrm_reg, width 8,
        jmp_rm_reg_mem mov88_reg;
.auto_address;
mov88_reg:
    b_sel RB, q_sel ALU, alu_op SELB, rd_sel_source MODRM_RM_REG, reg_wr_en,
        width 8, jmp opcode_fetch, clear_prefixes;
mov88_mem:
    b_sel RB, rb_modrm_reg, q_sel ALU, alu_op SELB, mdr_write;
    width 8, mem_write, jmp opcode_fetch, clear_prefixes;

// MOV 0x89     r/m := r (16-bit)
.at 0x89;
    modrm_start, mar_write, mar_wr_sel EA, rb_modrm_reg,
        jmp_rm_reg_mem mov89_reg;
.auto_address;
mov89_reg:
    b_sel RB, rb_modrm_reg, q_sel ALU, alu_op SELB,
        rd_sel_source MODRM_RM_REG, reg_wr_en,
        jmp opcode_fetch, clear_prefixes;
mov89_mem:
    b_sel RB, rb_modrm_reg, q_sel ALU, alu_op SELB, mdr_write;
    mem_write, jmp opcode_fetch, clear_prefixes;

// MOV 0x8a     r := r/m (8-bit)
.at 0x8a;
    modrm_start, mar_write, mar_wr_sel EA, ra_modrm_rm_reg, width 8,
        jmp_rm_reg_mem mov8a_reg, a_sel RA;
.auto_address;
mov8a_reg:
    a_sel RA, ra_modrm_rm_reg, q_sel ALU, alu_op SELA,
        rd_sel_source MODRM_REG, reg_wr_en, width 8,
        jmp opcode_fetch, clear_prefixes;
mov8a_mem:
    mem_read, width 8;
    rd_sel_source MODRM_REG, reg_wr_en, q_sel MDR, width 8,
        jmp opcode_fetch, clear_prefixes;

// MOV 0x8b     r := r/m (16-bit)
.at 0x8b;
    modrm_start, mar_write, mar_wr_sel EA, ra_modrm_rm_reg,
        jmp_rm_reg_mem mov8b_reg, a_sel RA;
.auto_address;
mov8b_reg:
    a_sel RA, ra_modrm_rm_reg, q_sel ALU, alu_op SELA,
        rd_sel_source MODRM_REG, reg_wr_en,
        jmp opcode_fetch, clear_prefixes;
mov8b_mem:
    mem_read;
    rd_sel_source MODRM_REG, reg_wr_en, q_sel MDR,
        jmp opcode_fetch, clear_prefixes;

// MOV 0xc6     r/m := immed8
.at 0xc6;
    modrm_start, mar_write, mar_wr_sel EA, jmp_dispatch_reg c6_dispatch;
.auto_address;
c6_dispatch:
    read_immed, width 8, jmp_rm_reg_mem movc6_reg; // reg == 0
    jmp opcode_fetch, clear_prefixes; // reg == 1
    jmp opcode_fetch, clear_prefixes; // reg == 2
    jmp opcode_fetch, clear_prefixes; // reg == 3
    jmp opcode_fetch, clear_prefixes; // reg == 4
    jmp opcode_fetch, clear_prefixes; // reg == 5
    jmp opcode_fetch, clear_prefixes; // reg == 6
    jmp opcode_fetch, clear_prefixes; // reg == 7
movc6_reg:
    b_sel IMMEDIATE, q_sel ALU, alu_op SELB,
        rd_sel_source MODRM_RM_REG, reg_wr_en, width 8,
        jmp opcode_fetch, clear_prefixes;
movc6_mem:
    b_sel IMMEDIATE, q_sel ALU, alu_op SELB, mdr_write;
    mem_write, width 8, jmp opcode_fetch, clear_prefixes;

// MOV 0xc7     r/m := immed16
.at 0xc7;
    modrm_start, mar_write, mar_wr_sel EA, jmp_dispatch_reg c7_dispatch;
.auto_address;
c7_dispatch:
    read_immed, jmp_rm_reg_mem movc7_reg; // reg == 0
    jmp opcode_fetch, clear_prefixes; // reg == 1
    jmp opcode_fetch, clear_prefixes; // reg == 2
    jmp opcode_fetch, clear_prefixes; // reg == 3
    jmp opcode_fetch, clear_prefixes; // reg == 4
    jmp opcode_fetch, clear_prefixes; // reg == 5
    jmp opcode_fetch, clear_prefixes; // reg == 6
    jmp opcode_fetch, clear_prefixes; // reg == 7
movc7_reg:
    b_sel IMMEDIATE, q_sel ALU, alu_op SELB,
        rd_sel_source MODRM_RM_REG, reg_wr_en,
        jmp opcode_fetch, clear_prefixes;
movc7_mem:
    b_sel IMMEDIATE, q_sel ALU, alu_op SELB, mdr_write;
    mem_write, jmp opcode_fetch, clear_prefixes;

#define MOV_REG_IMMED8(opcode, reg) \
    .at opcode; \
        read_immed, width 8, jmp mov_ ## reg ## _immed8; \
    .auto_address; \
    mov_ ## reg ## _immed8: \
        rd_sel_source MICROCODE_RD_SEL, rd_sel reg, reg_wr_en, q_sel ALU, \
            alu_op SELB, b_sel IMMEDIATE, width 8, clear_prefixes, \
            jmp opcode_fetch;

MOV_REG_IMMED8(0xb0, AL)
MOV_REG_IMMED8(0xb1, CL)
MOV_REG_IMMED8(0xb2, DL)
MOV_REG_IMMED8(0xb3, BL)
MOV_REG_IMMED8(0xb4, AH)
MOV_REG_IMMED8(0xb5, CH)
MOV_REG_IMMED8(0xb6, DH)
MOV_REG_IMMED8(0xb7, BH)

#define MOV_REG_IMMED16(opcode, reg) \
    .at opcode; \
        read_immed, jmp mov_ ## reg ## _immed16; \
    .auto_address; \
    mov_ ## reg ## _immed16: \
        rd_sel_source MICROCODE_RD_SEL, rd_sel reg, reg_wr_en, q_sel ALU, \
            alu_op SELB, b_sel IMMEDIATE, clear_prefixes, \
            jmp opcode_fetch;

MOV_REG_IMMED16(0xb8, AX)
MOV_REG_IMMED16(0xb9, CX)
MOV_REG_IMMED16(0xba, DX)
MOV_REG_IMMED16(0xbb, BX)
MOV_REG_IMMED16(0xbc, SP)
MOV_REG_IMMED16(0xbd, BP)
MOV_REG_IMMED16(0xbe, SI)
MOV_REG_IMMED16(0xbf, DI)
