// MOV 0x88     r/m := r (8-bit)
.at 0x88;
    modrm_start, mar_write, mar_wr_sel EA, width 8,
        jmp_rm_reg_mem mov88_reg;
.auto_address;
mov88_reg:
    b_sel RB, q_sel ALU, alu_op SELB, rd_sel_source MODRM_RM_REG, reg_wr_en,
        width 8, next_instruction;
mov88_mem:
    b_sel RB, q_sel ALU, alu_op SELB, mdr_write, segment DS;
    width 8, segment DS, mem_write, next_instruction;

// MOV 0x89     r/m := r (16-bit)
.at 0x89;
    modrm_start, mar_write, mar_wr_sel EA,
        jmp_rm_reg_mem mov89_reg;
.auto_address;
mov89_reg:
    b_sel RB, q_sel ALU, alu_op SELB,
        rd_sel_source MODRM_RM_REG, reg_wr_en,
        next_instruction;
mov89_mem:
    b_sel RB, q_sel ALU, alu_op SELB, mdr_write, segment DS;
    segment DS, mem_write, next_instruction;

// MOV 0x8a     r := r/m (8-bit)
.at 0x8a;
    modrm_start, mar_write, mar_wr_sel EA, ra_modrm_rm_reg, width 8,
        jmp_rm_reg_mem mov8a_reg, a_sel RA;
.auto_address;
mov8a_reg:
    a_sel RA, ra_modrm_rm_reg, q_sel ALU, alu_op SELA,
        rd_sel_source MODRM_REG, reg_wr_en, width 8,
        next_instruction;
mov8a_mem:
    segment DS, mem_read, width 8, segment DS;
    rd_sel_source MODRM_REG, reg_wr_en, q_sel MDR, width 8,
        next_instruction;

// MOV 0x8b     r := r/m (16-bit)
.at 0x8b;
    modrm_start, mar_write, mar_wr_sel EA, ra_modrm_rm_reg,
        jmp_rm_reg_mem mov8b_reg, a_sel RA, segment DS;
.auto_address;
mov8b_reg:
    a_sel RA, ra_modrm_rm_reg, q_sel ALU, alu_op SELA,
        rd_sel_source MODRM_REG, reg_wr_en,
        next_instruction;
mov8b_mem:
    segment DS, mem_read;
    rd_sel_source MODRM_REG, reg_wr_en, q_sel MDR,
        next_instruction;

// MOV 0xc6     r/m := immed8
.at 0xc6;
    modrm_start, mar_write, mar_wr_sel EA, jmp_dispatch_reg c6_dispatch;
.auto_address;
c6_dispatch:
    read_immed, width 8, jmp_rm_reg_mem movc6_reg; // reg == 0
    next_instruction; // reg == 1
    next_instruction; // reg == 2
    next_instruction; // reg == 3
    next_instruction; // reg == 4
    next_instruction; // reg == 5
    next_instruction; // reg == 6
    next_instruction; // reg == 7
movc6_reg:
    b_sel IMMEDIATE, q_sel ALU, alu_op SELB,
        rd_sel_source MODRM_RM_REG, reg_wr_en, width 8,
        next_instruction;
movc6_mem:
    b_sel IMMEDIATE, q_sel ALU, alu_op SELB, mdr_write, segment DS;
    segment DS, mem_write, width 8, next_instruction;

// MOV 0xc7     r/m := immed16
.at 0xc7;
    modrm_start, mar_write, mar_wr_sel EA, jmp_dispatch_reg c7_dispatch;
.auto_address;
c7_dispatch:
    read_immed, jmp_rm_reg_mem movc7_reg; // reg == 0
    next_instruction; // reg == 1
    next_instruction; // reg == 2
    next_instruction; // reg == 3
    next_instruction; // reg == 4
    next_instruction; // reg == 5
    next_instruction; // reg == 6
    next_instruction; // reg == 7
movc7_reg:
    b_sel IMMEDIATE, q_sel ALU, alu_op SELB,
        rd_sel_source MODRM_RM_REG, reg_wr_en,
        next_instruction;
movc7_mem:
    b_sel IMMEDIATE, q_sel ALU, alu_op SELB, mdr_write, segment DS;
    segment DS, mem_write, next_instruction;

#define MOV_REG_IMMED8(opcode, reg) \
    .at opcode; \
        read_immed, width 8, jmp mov_ ## reg ## _immed8; \
    .auto_address; \
    mov_ ## reg ## _immed8: \
        rd_sel_source MICROCODE_RD_SEL, rd_sel reg, reg_wr_en, q_sel ALU, \
            alu_op SELB, b_sel IMMEDIATE, width 8, next_instruction;

MOV_REG_IMMED8(0xb0, AL)
MOV_REG_IMMED8(0xb1, CL)
MOV_REG_IMMED8(0xb2, DL)
MOV_REG_IMMED8(0xb3, BL)
MOV_REG_IMMED8(0xb4, AH)
MOV_REG_IMMED8(0xb5, CH)
MOV_REG_IMMED8(0xb6, DH)
MOV_REG_IMMED8(0xb7, BH)

#define MOV_REG_IMMED16(opcode, reg) \
    .at opcode; \
        read_immed, jmp mov_ ## reg ## _immed16; \
    .auto_address; \
    mov_ ## reg ## _immed16: \
        rd_sel_source MICROCODE_RD_SEL, rd_sel reg, reg_wr_en, q_sel ALU, \
            alu_op SELB, b_sel IMMEDIATE, next_instruction;

MOV_REG_IMMED16(0xb8, AX)
MOV_REG_IMMED16(0xb9, CX)
MOV_REG_IMMED16(0xba, DX)
MOV_REG_IMMED16(0xbb, BX)
MOV_REG_IMMED16(0xbc, SP)
MOV_REG_IMMED16(0xbd, BP)
MOV_REG_IMMED16(0xbe, SI)
MOV_REG_IMMED16(0xbf, DI)

// MOV 0xa0     al := m[immed16]
.at 0xa0;
    read_immed, mar_write, mar_wr_sel Q, q_sel ALU, b_sel IMMEDIATE,
        alu_op SELB, jmp mova0, segment DS;
.auto_address;
mova0:
    segment DS, width 8, mem_read;
    rd_sel_source MICROCODE_RD_SEL, rd_sel AL, width 8, reg_wr_en,
        q_sel MDR, next_instruction;

// MOV 0xa1     ax := m[immed16]
.at 0xa1;
    read_immed, mar_write, mar_wr_sel Q, q_sel ALU, b_sel IMMEDIATE,
        alu_op SELB, jmp mova1, segment DS;
.auto_address;
mova1:
    segment DS, mem_read;
    rd_sel_source MICROCODE_RD_SEL, rd_sel AX, reg_wr_en,
        q_sel MDR, next_instruction;

// MOV 0xa2     m[immed16] := al
.at 0xa2;
    read_immed, mar_write, mar_wr_sel Q, q_sel ALU, b_sel IMMEDIATE,
        alu_op SELB, jmp mova2, ra_sel AL;
.auto_address;
mova2:
    a_sel RA, q_sel ALU, alu_op SELA, mdr_write, segment DS;
    segment DS, width 8, mem_write, next_instruction;

// MOV 0xa3     m[immed16] := al
.at 0xa3;
    read_immed, mar_write, mar_wr_sel Q, q_sel ALU, b_sel IMMEDIATE,
        alu_op SELB, jmp mova3, ra_sel AL;
.auto_address;
mova3:
    a_sel RA, q_sel ALU, alu_op SELA, mdr_write, segment DS;
    segment DS, mem_write, next_instruction;

// MOV 0x8e     sr := reg/mem
.at 0x8e;
    modrm_start, mar_write, mar_wr_sel EA, ra_modrm_rm_reg,
        jmp_dispatch_reg dispatch_8e;
.auto_address;
dispatch_8e:
    ra_modrm_rm_reg, segment DS, jmp_rm_reg_mem mov8e_reg;
    ra_modrm_rm_reg, segment DS, jmp_rm_reg_mem mov8e_reg;
    ra_modrm_rm_reg, segment DS, jmp_rm_reg_mem mov8e_reg;
    ra_modrm_rm_reg, segment DS, jmp_rm_reg_mem mov8e_reg;
    next_instruction; // reg == 4
    next_instruction; // reg == 5
    next_instruction; // reg == 6
    next_instruction; // reg == 7
mov8e_reg:
    segment_wr_en, rd_sel_source MODRM_REG, a_sel RA, alu_op SELA, q_sel ALU,
        next_instruction;
mov8e_mem:
    segment DS, mem_read;
    rd_sel_source MODRM_REG, segment_wr_en, q_sel MDR,
        next_instruction;

// MOV 0x8c     reg/mem := sr
.at 0x8c;
    modrm_start, mar_write, mar_wr_sel EA, jmp_dispatch_reg dispatch_8c;
.auto_address;
dispatch_8c:
    segment ES, jmp_rm_reg_mem mov8c_reg;
    segment CS, jmp_rm_reg_mem mov8c_reg;
    segment SS, jmp_rm_reg_mem mov8c_reg;
    segment DS, jmp_rm_reg_mem mov8c_reg;
    next_instruction; // reg == 4
    next_instruction; // reg == 5
    next_instruction; // reg == 6
    next_instruction; // reg == 7
mov8c_reg:
    reg_wr_en, rd_sel_source MODRM_RM_REG, b_sel SR, alu_op SELB, q_sel ALU,
        next_instruction;
mov8c_mem:
    b_sel SR, q_sel ALU, alu_op SELB, mdr_write, segment DS;
    segment DS, mem_write, next_instruction;
